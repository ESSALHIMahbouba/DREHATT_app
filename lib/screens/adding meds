import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:mymeds_app/auth/main_page.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:mymeds_app/screens/medication.dart';

class AddMedication1 extends StatefulWidget {
  const AddMedication1({Key? key}) : super(key: key);

  @override
  _AddMedication1State createState() => _AddMedication1State();
}

class _AddMedication1State extends State<AddMedication1> {
  final user = FirebaseAuth.instance.currentUser;
  final _formKey = GlobalKey<FormState>();
  final _medicationNameController = TextEditingController();
  final _medicationTypeController = TextEditingController();
  final _medicationQuantityController = TextEditingController();
  final _medicationDosageController = TextEditingController();
  final _medicationFrequencyController = TextEditingController();
  final _medicationTimeOfDayController = TextEditingController();
  final _medicationReminderController = TextEditingController();
  final _medicationNoteController = TextEditingController();
  final _medicationPhotoController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Add Medication',
            style: TextStyle(
              color: Colors.black,
              fontWeight: FontWeight.w600,
            )),
        backgroundColor: Color.fromARGB(255, 172, 218, 226),
        leading: IconButton(
          icon: const Icon(
            Icons.arrow_back_ios,
            color: Colors.black,
          ),
          padding: const EdgeInsets.only(left: 20),
          onPressed: () {
            Navigator.pop(context);
          },
        ),
        centerTitle: true,
      ),
      body: Form(
        key: _formKey,
        child: ListView(
          padding: const EdgeInsets.all(16),
          children: [
            TextFormField(
              controller: _medicationNameController,
              decoration: const InputDecoration(
                labelText: 'Medication Name',
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter the medication name';
                }
                return null;
              },
            ),
            TextFormField(
              controller: _medicationTypeController,
              decoration: const InputDecoration(
                labelText: 'Medication Type',
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter the medication type';
                }
                return null;
              },
            ),
            TextFormField(
              controller: _medicationQuantityController,
              decoration: const InputDecoration(
                labelText: 'Medication Quantity',
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter the medication quantity';
                }
                return null;
              },
            ),
            TextFormField(
              controller: _medicationDosageController,
              decoration: const InputDecoration(
                labelText: 'Medication Dosage',
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter the medication dosage';
                }
                return null;
              },
            ),
            TextFormField(
              controller: _medicationFrequencyController,
              decoration: const InputDecoration(
                labelText: 'Medication Frequency',
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter the medication frequency';
                }
                return null;
              },
            ),
            TextFormField(
              controller: _medicationTimeOfDayController,
              decoration: const InputDecoration(
                labelText: 'Medication Time of Day',
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter the medication time of day';
                }
                return null;
              },
            ),
            TextFormField(
              controller: _medicationReminderController,
              decoration: const InputDecoration(
                labelText: 'Medication Reminder',
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter the medication reminder';
                }
                return null;
              },
            ),
            TextFormField(
              controller: _medicationNoteController,
              decoration: const InputDecoration(
                labelText: 'Medication Note',
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter the medication note';
                }
                return null;
              },
            ),
            TextFormField(
              controller: _medicationPhotoController,
              decoration: const InputDecoration(
                labelText: 'Medication Photo',
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Please enter the medication photo';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: () async {
                if (_formKey.currentState!.validate()) {
                  await FirebaseFirestore.instance
                      .collection('users')
                      .doc(user!.uid)
                      .collection('medications')
                      .add({
                    'medicationName': _medicationNameController.text,
                    'medicationType': _medicationTypeController.text,
                    'medicationQuantity': _medicationQuantityController.text,
                    'medicationDosage': _medicationDosageController.text,
                    'medicationFrequency': _medicationFrequencyController.text,
                    'medicationTimeOfDay': _medicationTimeOfDayController.text,
                    'medicationReminder': _medicationReminderController.text,
                    'medicationNote': _medicationNoteController.text,
                    'medicationPhoto': _medicationPhotoController.text,
                  });
                  Navigator.of(context).pop();
                }
              },
              child: const Text('Add Medication'),
            ),
          ],
        ),
      ),
    );
  }
}







onTap: () => showDialog(
                  context: context,
                  builder: (context) {
                    return AlertDialog(
                      title: Text(
                        'Select the Medication Strength',
                        style: GoogleFonts.poppins(
                          color: const Color.fromARGB(255, 16, 15, 15),
                        ),
                      ),
                      content: StatefulBuilder(
                        builder: (BuildContext context,
                            void Function(void Function()) setState) {
                          return Column(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Row(
                                children: [
                                  Radio<Units>(
                                    value: Units.mg,
                                    groupValue: _units,
                                    onChanged: (Units? value) {
                                      setState(() {
                                        _units = value;
                                      });
                                    },
                                  ),
                                  Text(
                                    'mg',
                                    style: GoogleFonts.poppins(
                                      color:
                                          const Color.fromARGB(255, 16, 15, 15),
                                    ),
                                  ),
                                ],
                              ),
                              Row(
                                children: [
                                  Radio<Units>(
                                    value: Units.mcg,
                                    groupValue: _units,
                                    onChanged: (Units? value) {
                                      setState(() {
                                        _units = value;
                                      });
                                    },
                                  ),
                                  Text(
                                    'mcg',
                                    style: GoogleFonts.poppins(
                                      color:
                                          const Color.fromARGB(255, 16, 15, 15),
                                    ),
                                  ),
                                ],
                              ),
                              Row(
                                children: [
                                  Radio<Units>(
                                    value: Units.g,
                                    groupValue: _units,
                                    onChanged: (Units? value) {
                                      setState(() {
                                        _units = value;
                                      });
                                    },
                                  ),
                                  Text(
                                    'g',
                                    style: GoogleFonts.poppins(
                                      color:
                                          const Color.fromARGB(255, 16, 15, 15),
                                    ),
                                  ),
                                ],
                              ),
                              Row(
                                children: [
                                  Radio<Units>(
                                    value: Units.ml,
                                    groupValue: _units,
                                    onChanged: (Units? value) {
                                      setState(() {
                                        _units = value;
                                      });
                                    },
                                  ),
                                  Text(
                                    'ml',
                                    style: GoogleFonts.poppins(
                                      color:
                                          const Color.fromARGB(255, 16, 15, 15),
                                    ),
                                  ),
                                ],
                              ),
                              Row(
                                children: [
                                  Radio<Units>(
                                    value: Units.percentage,
                                    groupValue: _units,
                                    onChanged: (Units? value) {
                                      setState(() {
                                        _units = value;
                                      });
                                    },
                                  ),
                                  Text(
                                    '%',
                                    style: GoogleFonts.poppins(
                                      color:
                                          const Color.fromARGB(255, 16, 15, 15),
                                    ),
                                  ),
                                ],
                              ),
                            ],
                          );
                        },
                      ),
                      actions: [
                        TextButton(
                          onPressed: () {
                            Navigator.pop(context);
                          },
                          child: Text(
                            'Cancel',
                            style: GoogleFonts.poppins(
                              color: const Color.fromARGB(255, 16, 15, 15),
                            ),
                          ),
                        ),
                        TextButton(
                          onPressed: () {
                            Navigator.pop(context);
                          },
                          child: Text(
                            'Ok',
                            style: GoogleFonts.poppins(
                              color: const Color.fromARGB(255, 16, 15, 15),
                            ),
                          ),
                        ),
                      ],
                    );
                  },
                ),
                controller: _medicationStrengthController,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter the medication strength';
                  }
                  return null;
                },
                cursorColor: const Color.fromARGB(255, 7, 82, 96),
                decoration: InputDecoration(
                  hintText: '00',
                  labelText: 'Medication Strength',
                  labelStyle: GoogleFonts.poppins(
                    color: const Color.fromARGB(255, 16, 15, 15),
                  ),
                  filled: true,
                  floatingLabelBehavior: FloatingLabelBehavior.auto,
                  // fillColor: Colors.white,
                  focusedBorder: const OutlineInputBorder(
                    borderRadius: BorderRadius.all(
                      Radius.circular(
                        20,
                      ),
                    ),
                    borderSide: BorderSide(
                      color: Color.fromARGB(255, 7, 82, 96),
                    ),
                  ),
                  enabledBorder: const OutlineInputBorder(
                    borderRadius: BorderRadius.all(
                      Radius.circular(
                        20,
                      ),
                    ),
                    borderSide: BorderSide(
                      color: Colors.transparent,
                    ),
                  ),
                ),

      
      
               var timePicked = await showTimePicker(
                    context: context,
                    initialTime: TimeOfDay.now(),
                  );
                  //In 24 hours format
                  // String time = '${timePicked!.hour}:${timePicked.minute}';
                  //In 12 hours format
                  String time = timePicked!.format(context);

                  setState(() {
                    _medicationTimeOfDayController =
                        TextEditingController(text: time);
                  });
                    
                    